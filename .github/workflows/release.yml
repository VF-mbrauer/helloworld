on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  repository_dispatch:
    types: [run-ping]

name: Create Release

jobs:
  once:
    name: Create single release for all builds
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build:
    name: Create Release
    needs: once
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-13'
        name: Build
        run: go build -v -o helloworld-${{ matrix.os }}-amd64-${{ github.ref_name }} ./...
      - if: matrix.os == 'windows-latest'
        name: Build
        run: cmd /C "set CGO_ENABLED=0 && go build -v -o helloworld-${{ matrix.os }}-amd64-${{ github.ref_name }} ./..."  
      - name: Test
        run: go test -v ./...
      - if: matrix.os == 'windows-latest'
        name: create zip
        uses: vimtor/action-zip@v1.1
        with:
          files: helloworld-${{ matrix.os }}-amd64-${{ github.ref_name }}
          dest: helloworld-${{ matrix.os }}-amd64-${{ github.ref_name }}.zip
      - if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-13'
        name: create-archive
        run: tar -czf helloworld-${{ matrix.os }}-amd64-${{ github.ref_name }}.tar.gz helloworld-${{ matrix.os }}-amd64-${{ github.ref_name }}
      - if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-13'
        name: Upload Release Asset
        id: upload-release-asset_linuxmacos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }}
          asset_path: ./helloworld-${{ matrix.os }}-amd64-${{ github.ref_name }}.tar.gz
          asset_name: helloworld-${{ matrix.os }}-amd64-${{ github.ref_name }}.tar.gz
          asset_content_type: application/zip
      - if: matrix.os == 'windows-latest'
        name: Upload Release Asset
        id: upload-release-asset_windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }}
          asset_path: ./helloworld-${{ matrix.os }}-amd64-${{ github.ref_name }}.zip
          asset_name: helloworld-${{ matrix.os }}-amd64-${{ github.ref_name }}.zip
          asset_content_type: application/zip
      - if: matrix.os == 'windows-latest'
        name: Upload Release Asset only executable for winget
        id: upload-release-asset_windows_exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }}
          asset_path: ./helloworld.exe
          asset_name: helloworld.exe
          asset_content_type: application/vnd.microsoft.portable-executable